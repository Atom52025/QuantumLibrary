name: CI with MySQL and CD with EC2

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  tests:
    env:
      STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
      STEAMDB_API_KEY: ${{ secrets.STEAMDB_API_KEY }}
      SB_SECURITY_PASSWORD: ${{ secrets.SB_SECURITY_PASSWORD }}

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root --password=root_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Run Tests
        env:
          DB_TEST_URL: jdbc:mysql://localhost:3306/test_db
          DB_TEST_USER: test_user
          DB_TEST_PASSWORD: test_password
        run: mvn test

  deploy:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install dependencies
        run: npm install

      - name: Deploy to EC2
        run: |
          git fetch origin main
          git pull origin main
          echo "${{ secrets.DOCKER_COMPOSE_BUILD_FILE }}" > docker-compose.yml
          docker-compose build
          docker push atom52025/quantum-library-backend:latest
          docker push atom52025/quantum-library-frontend:latest
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'          
            echo "${{ secrets.DOCKER_COMPOSE_START_FILE }}" > docker-compose.yml
          
            docker-compose down
          
            docker pull atom52025/quantum-library-frontend:latest
            docker pull atom52025/quantum-library-backend:latest
          
            docker image prune -f
            docker-compose up -d
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}